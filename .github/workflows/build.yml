name: Build and Release
 
on:
  push:
    tags:
      - 'v*' # 当推送 v 开头的标签时触发
  workflow_dispatch: # 允许手动触发

jobs:
  build-win:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - os: windows-2019
            python-version: '3.9'
            arch: x64
            glances_version: 'nv4.3.1'
            output_name: glances-windows-x64.exe

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka
    - name: Clone glances
      run: |
        git clone -b ${{ matrix.glances_version}} --depth 1 https://github.com/pedoc/glances.git

    - name: Build with Nuitka (Windows)
      run: |
        cd glances
        git branch
        git checkout ${{ matrix.glances_version }}
        git status
        git log -1

        pip install -r requirements.txt
        pip install -r optional-requirements.txt
        pip install -r dev-requirements.txt
        pip install -r doc-requirements.txt
        nuitka --onefile --standalone --output-dir=dist --output-filename=${{matrix.output_name}} --assume-yes-for-downloads --include-module=psutil --show-modules --follow-imports --include-plugin-dir=glances/plugins --include-raw-dir=glances/plugins=glances/plugins --include-raw-dir=glances/exports/=glances/exports --include-raw-dir=glances/outputs/=glances/outputs run.py 
        move dist ../


    - name: Checksum
      run: |
        echo "Checksum for ${{ matrix.output_name }}:"
        certutil -hashfile dist/${{ matrix.output_name }} SHA256

    - name: Create Github Release
      id: create_release
      uses: softprops/action-gh-release@v2.2.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ./dist/${{ matrix.output_name }}
  build-linux:
    runs-on: ${{ matrix.os }}
    container:
      image: debian:10
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.9.1'
            arch: x64
            output_name: glances-linux-x64
            glances_version: 'nv4.3.1'
          - os: ubuntu-24.04-arm #ubuntu-latest-arm
            python-version: '3.9.1'
            arch: arm64
            output_name: glances-linux-arm64
            glances_version: 'nv4.3.1'

    steps:
    - name: Check Environment
      run: |
        uname -a
        ldd --version

    - uses: actions/checkout@v3

    # - name: Set up Python ${{ matrix.python-version }}
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: ${{ matrix.python-version }}
    #     architecture: ${{ matrix.arch }}

    # - name: Set up Python
    #   run: |
    #     apt update
    #     apt install python3 python3-pip patchelf zlib1g-dev -y
    #     mv /usr/bin/python /usr/bin/python.bak || true
    #     ln -s /usr/bin/python3 /usr/bin/python

    # - name: Set up Python
    #   run: |
    #     apt update
    #     apt install -y git curl wget build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev autoconf
    #     curl https://pyenv.run | bash

    #     echo 'export PYENV_ROOT="$HOME/.pyenv"' | tee -a /etc/profile
    #     echo '[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"' | tee -a /etc/profile
    #     echo 'eval "$(pyenv init - bash)"' | tee -a /etc/profile
    #     echo 'eval "$(pyenv virtualenv-init -)"' | tee -a /etc/profile

    #     source /etc/profile

    #     pyenv install ${{ matrix.python-version }}
    #     pyenv global ${{ matrix.python-version }}

    - name: Build Python ${{ matrix.python-version }}
      run: |
        apt update
        apt install -y wget build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libsqlite3-dev libreadline-dev libffi-dev curl libbz2-dev patchelf
        wget https://www.python.org/ftp/python/${{ matrix.python-version }}/Python-${{ matrix.python-version }}.tgz
        tar -xf Python-${{ matrix.python-version }}.tgz
        cd Python-${{ matrix.python-version }}
        ./configure --enable-optimizations
        make -j 4
        make install
        which python3
        which pip3
        
        python3 -V
        pip3 -V

        echo "replace python3 to python"
        mv /usr/bin/python /usr/bin/python.bak || true
        mv /usr/bin/pip /usr/bin/pip.bak || true
        ln -sf /usr/local/bin/python3 /usr/bin/python
        ln -sf /usr/local/bin/pip3 /usr/bin/pip

        echo "python version:"
        python -V
        pip -V
    
    - name: Install dependencies
      run: |
        apt update
        apt install -y git curl wget build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev autoconf
        python -m pip install --upgrade pip
        pip install nuitka zstandard

    - name: Clone glances
      run: |
        git clone -b ${{ matrix.glances_version}} --depth 1 https://github.com/pedoc/glances.git
    
    - name: Build with Nuitka (Linux)
      run: |
        cd glances
        git branch
        git checkout ${{ matrix.glances_version }}
        git status
        git log -1

        pip install -r requirements.txt
        pip install -r optional-requirements.txt
        pip install -r dev-requirements.txt
        pip install -r doc-requirements.txt
        nuitka \
        --onefile \
        --standalone \
        --output-dir=dist \
        --output-filename=${{matrix.output_name}} \
        --assume-yes-for-downloads \
        --include-module=psutil \
        --show-modules \
        --follow-imports \
        --include-plugin-dir=glances/plugins \
        --include-raw-dir=glances/plugins=glances/plugins \
        --include-raw-dir=glances/exports/=glances/exports \
        --include-raw-dir=glances/outputs/=glances/outputs \
        run.py  
        mv dist ../

    - name: Checksum
      run: |
        echo "Checksum for ${{ matrix.output_name }}:"
        sha256sum dist/${{ matrix.output_name }}
#        sha1sum dist/${{ matrix.output_name }}
#        md5sum dist/${{ matrix.output_name }}

    - name: Create Github Release
      id: create_release
      uses: softprops/action-gh-release@v2.2.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ./dist/${{ matrix.output_name }}